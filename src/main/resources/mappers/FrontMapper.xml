<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.springdoc.mapper.FrontMapper">

    <select id="getPossibleClassList" resultType="com.example.springdoc.dto.ClassDto">
        select class_id
             , speaker
             , location
             , max_people
             , content
             , to_char(start_time, 'YYYY-MM-DD HH24:MI:SS') as start_time
             , to_char(end_time, 'YYYY-MM-DD HH24:MI:SS')   as end_time
        from class_tb
        where (start_time + '1 day'::interval) > now()
        order by start_time asc
    </select>

    <insert id="regSubscribe" parameterType="com.example.springdoc.dto.SubscribeDto">
        insert into class_employer_tb ( class_id
                                      , employer_id
                                      , status
                                      , subscribe_date)
        values ( #{classId}
               , #{employerId}
               , '1'
               , now())
    </insert>

    <select id="chkSubscribe" parameterType="com.example.springdoc.dto.SubscribeDto" resultType="int">
        select count(class_id)
        from class_employer_tb
        where class_id = #{classId}
          and employer_id = #{employerId}
          and status = '1'
    </select>

    <select id="getSubscribeCnt" parameterType="com.example.springdoc.dto.SubscribeDto" resultType="int">
        select count(employer_id)
        from class_employer_tb
        where class_id = #{classId}
          and status = '1'
    </select>

    <select id="getMaxPeopleCnt" parameterType="com.example.springdoc.dto.SubscribeDto" resultType="int">
        select max_people
        from class_tb
        where class_id = #{classId}
    </select>

    <select id="getSubscribeList" parameterType="String" resultType="com.example.springdoc.dto.ClassDto">
        select c.class_id
             , c.speaker
             , c.location
             , c.max_people
             , c.content
             , c.start_time
             , c.end_time
        from class_employer_tb ce
                 inner join class_tb c
                            on ce.class_id = c.class_id
        where ce.employer_id = #{employerId}
          and ce.status = '1'
    </select>

    <update id="updSubscribe" parameterType="com.example.springdoc.dto.SubscribeDto">
        update class_employer_tb
        set status      = '0'
          , cancel_date = now()
        where class_id = #{classId}
          and employer_id = #{employerId}
    </update>

    <select id="getPopularClassList" resultType="com.example.springdoc.dto.RankingDto">
        select row_number()             over () as ranking
             , c.class_id
             , c.speaker
             , c.location
             , c.max_people
             , c.content
             , c.start_time
             , c.end_time
             , count(ce.employer_id) as sub_count
        from class_tb c
                 inner join class_employer_tb ce
                            on c.class_id = ce.class_id
        group by c.class_id
               , c.speaker
               , c.location
               , c.max_people
               , c.content
               , c.start_time
               , c.end_time
        order by sub_count desc
    </select>
</mapper>
